#!/usr/bin/env python3

import os
import sys

def define_type(f, base_name, class_name, raw_fields):
    """ Define an Expression sub-class for each type in our grammar. """
    f.write(f"  static class {class_name} extends {base_name} ")
    f.write("{ \n")
    fields = raw_fields.split(", ")

    # constructor
    f.write(f"    {class_name}({raw_fields})")
    f.write("{ \n")
    for field in fields:
        fname = field.split(" ")[1]
        print(f"      this.{fname} = {fname};", file=f)

    f.write("    }\n\n")

    # field declarations
    for field in fields:
        print(f"    final {field};", file=f)

    f.write("  }\n\n")

def define_visitor(f, base_name, grammar_types):
    """ Define a Visitor interface which will later implement parsing operations 
        for each node type. """
    f.write("  interface Visitor<R> { \n")

    for gt in grammar_types:
        class_name = gt.split(":")[0].strip()
        print(f"    R visit{class_name + base_name}({class_name} {base_name.lower()});", file=f)

    f.write("  }\n")



def define_ast(output_dir, base_name, grammar_types):
    base_path = os.path.join(output_dir, f"{base_name}.java")
    with open(base_path, "w") as f:
        f.write("package jtomahawk.ast;\n\n")

        f.write("import java.util.List;\n")
        f.write("import jtomahawk.Token;\n\n")

        f.write(f"abstract class {base_name}")
        f.write(" {\n")

        define_visitor(f, base_name, grammar_types)

        for gt in grammar_types:
            parts = gt.split(":")
            class_name = parts[0].strip()
            fields = parts[1].strip()
            define_type(f, base_name, class_name, fields)

        f.write("}\n\n")

def main(output_dir):
    print(output_dir)
    grammar_types = [
        "Binary : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal : Object value",
        "Unary : Token operator, Expr right"
    ]
    define_ast(output_dir, "Expr", grammar_types)

if __name__ == "__main__":
    args = sys.argv
    if len(args) != 2:
        print("Must pass in an outdir parameter")

    main(args[1])
